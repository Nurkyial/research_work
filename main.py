# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QComboBox
import pandas as pd


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.upload_label = QtWidgets.QLabel(self.centralwidget)
        self.upload_label.setGeometry(QtCore.QRect(10, 20, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.upload_label.setFont(font)
        self.upload_label.setObjectName("upload_label")
        self.text_label = QtWidgets.QLabel(self.centralwidget)
        self.text_label.setGeometry(QtCore.QRect(10, 80, 241, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.text_label.setFont(font)
        self.text_label.setObjectName("text_label")

        self.file1 = QtWidgets.QLabel(self.centralwidget)
        self.file1.setGeometry(QtCore.QRect(10, 140, 55, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.file1.setFont(font)
        self.file1.setObjectName("file1")

        self.file2 = QtWidgets.QLabel(self.centralwidget)
        self.file2.setGeometry(QtCore.QRect(10, 200, 55, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.file2.setFont(font)
        self.file2.setObjectName("file2")

        '''
        self.progressBar_1 = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar_1.setGeometry(QtCore.QRect(100, 140, 230, 25))
        self.progressBar_1.setProperty("value", 24)
        self.progressBar_1.setObjectName("progressBar_1")
        self.progressBar_2 = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar_2.setGeometry(QtCore.QRect(100, 200, 230, 25))
        self.progressBar_2.setProperty("value", 24)
        self.progressBar_2.setObjectName("progressBar_2")
        '''

        # uploading file1
        self.browse1 = QtWidgets.QPushButton(self.centralwidget)
        self.browse1.setGeometry(QtCore.QRect(360, 140, 93, 28))
        self.browse1.setObjectName("browse1")
        self.browse1.clicked.connect(self.browse1_open)

        # uploading file2
        self.browse2 = QtWidgets.QPushButton(self.centralwidget)
        self.browse2.setGeometry(QtCore.QRect(360, 200, 93, 28))
        self.browse2.setObjectName("browse2")
        self.browse2.clicked.connect(self.browse2_open)

        # match button for two files
        self.match = QtWidgets.QPushButton(self.centralwidget)
        self.match.setGeometry(QtCore.QRect(160, 400, 93, 28))
        self.match.setObjectName("match")
        self.match.setStyleSheet('QPushButton {background-color: #00bfff}')
        self.match.clicked.connect(self.match_button)

        # Initialize the file_path attribute
        self.file_path = None

        # test labels for browses
        self.test_label1 = QtWidgets.QLabel(self.centralwidget)
        self.test_label1.setGeometry(QtCore.QRect(60, 140, 55, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.test_label1.setFont(font)
        self.test_label1.setObjectName("test_label")

        self.test_label2 = QtWidgets.QLabel(self.centralwidget)
        self.test_label2.setGeometry(QtCore.QRect(60, 200, 55, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.test_label2.setFont(font)
        self.test_label2.setObjectName("test_label")


        self.sem = QtWidgets.QLabel(self.centralwidget)
        self.sem.setGeometry(QtCore.QRect(10, 290, 90, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.sem.setFont(font)
        self.sem.setObjectName("semester")
        #self.sem.adjustSize()

        #  creating combobox for list of semesters
        self.comboBox = QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(150, 290, 200, 50))
        self.comboBox.addItem("1")
        self.comboBox.addItem("2")
        self.comboBox.addItem("3")
        self.comboBox.addItem("4")
        self.comboBox.addItem("5")
        self.comboBox.addItem("6")
        self.comboBox.addItem("7")
        self.comboBox.addItem("8")

        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def resize(self, text):
        max_word = 30
        return text[:max_word] + '...'



    def browse1_open(self):
        file, name = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, "Open File", "", "All Files (*);; pdf files (*.pdf)")
        path = str(file)

        if name:
            self.test_label1.setText(self.resize(file))
            self.test_label1.adjustSize()
            # Update the file path attribute
            self.file_path = path

    def browse2_open(self):
        file, name = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, "Open File", "", "All Files (*);; pdf files (*.pdf)")

        if name:
            self.test_label2.setText(self.resize(file))
            self.test_label2.adjustSize()
            return file

    def match_button(self):
        #self.path = "C:\\Users\\Пользователь\\Documents\\ex.xlsx"

        if self.file_path is not None:
            self.write = XLSReader(self.file_path)
            print(self.write.data_dict)
        else:
            print("No file selected. Please choose a file")


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.upload_label.setText(_translate("MainWindow", "Upload"))
        self.text_label.setText(_translate("MainWindow", "Upload two files (.pdf or .xls)"))
        self.test_label1.setText(_translate("MainWindow", ""))
        self.test_label2.setText(_translate("MainWindow", ""))
        self.file1.setText(_translate("MainWindow", "File1"))
        self.file2.setText(_translate("MainWindow", "File2"))
        self.browse1.setText(_translate("MainWindow", "Browse"))
        self.browse2.setText(_translate("MainWindow", "Browse"))
        self.match.setToolTip(_translate("MainWindow", "<html><head/><body><p>Match two files</p></body></html>"))
        self.match.setText(_translate("MainWindow", "Match"))
        self.sem.setText(_translate("MainWindow", "semester"))



class XLSReader:
    def __init__(self, file):
        self.xls = pd.ExcelFile(file)
        self.course = 6 + 3
        self.column = [2, 11, 12, 21, 22]
        self.start = 5
        self.end = 30
        self.save_to_dict(self.course, column_indices=self.column, row_start=self.start, row_end=self.end)

    def save_to_dict(self, course, column_indices=None, row_start=None, row_end=None):
        self.data_dict = {}

        # Iterate through each sheet
        for sheet_name in self.xls.sheet_names[6:course]:

            # Read the sheet into a DataFrame
            self.df = pd.read_excel(self.xls, sheet_name)

            # If column_indices is not provided, use all the columns
            if column_indices is None:
                column_indices = range(len(self.df.columns))

            # Validate column indices
            if any(idx >= len(self.df.columns) for idx in column_indices):
                raise ValueError("Invalid column index provided.")

            # Iterate over rows within the specified range and save it to the dictionary
            for index, row in self.df.iterrows():
                if row_start is not None and index < row_start:
                    continue  # skip rows before the specified start index

                if row_end is not None and index > row_end:
                    break

                for i in range(1, len(column_indices), 2):
                    key = row.iloc[column_indices[0]]
                    values = list(row.iloc[i] for i in column_indices[i:i + 2])  # Use the rest as values

                    if key not in self.data_dict:
                        self.data_dict[key] = values
                    else:
                        if values[0] != 0:
                            self.data_dict[key][0] += values[0]
                            self.data_dict[key][1] = values[1]

        return self.data_dict




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle(QtWidgets.QStyleFactory.create('Fusion'))
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
